<?php

/**
 * @file
 * SimpleSAMLphp authentication module for Drupal.
 *
 * This authentication module is based on the shibboleth authentication module,
 * with changes to adopt to use simpleSAMLphp.
 *
 * ISSUES and TODOs:
 *  ISSUE: User is always dropped on user page after login, instead of where
 *         they were when they clicked "Federated Log In". Because of this, deep
 *         linking to access controlled content does not work. Usability would
 *         be considerably increased if this were resolved.
 *  FYI: Drupal now requires knowledge of the local user password in order to
 *       change e-mail address, etc. This could be an issue for users of
 *       accounts that are autoprovisioned by this module, though Drupal does
 *       give users the ability to reset their password to something they know
 *       via the Request new password feature.
 *  KLUDGE: Drupal does not kill the session on logout, even with
 *          drupal_session_destroy_uid(), so I had to use session_destroy().
 *
 * @todo Rework the default login limitation logic to use a drupal permission
 *        rather than a list of UIDs.
 * @todo When denying access because the administrator has chosen not to allow
 *        the module to register/create accounts, the user is told to contact
 *        the administrator; the message should provide the contact information.
 *  ISSUE: Until Drupal issue #754560 is resolved users will not see logout
 *         notices.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function spid_pasw_help($route_name) {
  switch ($route_name) {
    case 'spid_pasw.admin_settings':
    case 'help.page.spid_pasw':
      $output = t('<p>This module integrates Drupal with a SimpleSAMLphp Service Point (SP), effectively federating Drupal.</p>');

      return $output;
  }
}

/**
 * Implements hook_user_logout().
 */
function spid_pasw_user_logout($account) {

  $logout_url = \Drupal::config('spid_pasw.settings')->get('logout_goto_url');
  $simplesaml = \Drupal::service('spid_pasw.manager');

  // Have to destroy the session here as some configurations of
  // spid_pasw can create infinite loops. By removing IdP auth before
  // Drupal auth, checks for local authentication will trigger before the
  // session is destroyed naturally. We must therefore destroy the session
  // manually here.
  session_destroy();

  if ($logout_url) {
    $simplesaml->logout($logout_url);
  }
  else {
    $simplesaml->logout();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the user register form to include a checkbox signifying the user
 * should be SimpleSAML enabled. Removes password fields if the IdP
 * is the sole place for password management.
 *
 * @see AccountForm::form()
 * @see spid_pasw_user_form_submit()
 */
function spid_pasw_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  spid_pasw_user_form_includes($form);
  $authmap = \Drupal::service('externalauth.authmap');

  // If the user has a spid_pasw authmap record, then don't require
  // them to know their Drupal password. This will allow them to change their
  // e-mail address, and set a Drupal password if they want to
  // (and are allowed).
  $account = $form_state->getFormObject()->getEntity();
  $saml_enabled = $authmap->get($account->id(), 'spid_pasw');

  if ($saml_enabled) {
    $form['spid_pasw_user_enable']['#default_value'] = TRUE;
    $form['account']['current_pass']['#access'] = FALSE;

    // If the user is a spid_pasw user and is NOT allowed to set their
    // Drupal password, remove the fields from the form.
    $config = \Drupal::config('spid_pasw.settings');
    if (!$config->get('allow.set_drupal_pwd')) {
      $form['account']['pass']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the user register form to include a checkbox signifying the user
 * should be SimpleSAML enabled.
 *
 * @see AccountForm::form()
 * @see spid_pasw_user_form_submit()
 */
function spid_pasw_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  spid_pasw_user_form_includes($form);
  $form['spid_pasw_user_enable']['#default_value'] = TRUE;
}

/**
 * Helper function to include the SimpleSAML checkbox on user forms.
 *
 * @param array $form
 *   The user account form.
 *
 * @see spid_pasw_form_user_form_alter()
 * @see spid_pasw_form_user_register_form_alter()
 * @see spid_pasw_user_form_submit()
 */
function spid_pasw_user_form_includes(&$form) {
  $form['spid_pasw_user_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable this user to leverage SAML authentication'),
    '#access' => \Drupal::currentUser()->hasPermission('change saml authentication setting'),
    '#description' => t("WARNING: if unchecked, this will become a local Drupal user, which might be denied access based on the SimpleSAMLphp settings for authenticating local Drupal accounts.<br />Don't use this setting for access control, which should be configured in your IdP instead.<br />NOTE: if the configuration option 'Automatically enable SAML authentication for existing users upon successful login' is activated, this Drupal account can become linked with SAML (again) when the user succesfully authenticates to the IdP."),
  ];

  // We store the authname as the initial email. If we're using SimpleSAML we
  // need to enforce an email address.
  $form['account']['mail']['#required'] = TRUE;

  $form['actions']['submit']['#submit'][] = 'spid_pasw_user_form_submit';
}

/**
 * @PASW rileva percorso libreria installata con installatore specifico
 * 
 */
function _spid_pasw_get_lib_path()
{
	$result = NULL;
	$orig = getcwd();
	$root = $_SERVER['DOCUMENT_ROOT'];
	chdir ($root);
	if (file_exists('simplespidphp')) {
		chdir('simplespidphp');
		$result = getcwd();
	} else if (is_writable('..') && file_exists('../simplespidphp')) {
		chdir('../simplespidphp');
		$result = getcwd();
	}
	chdir($orig);
  //echo 'result='.$result;
  //exit;
	return $result;
}

/**
 * @param string original string
 * @return string the input string without accents
 */   
function _spid_pasw_remove_unwanted_chars($str)
{
  $a = array(' ', chr(0xc0), chr(0xc1), chr(0xc2), chr(0xc3), chr(0xc4), chr(0xc5), chr(0xc6), chr(0xc7), chr(0xc8), chr(0xc9), chr(0xca), chr(0xcb), chr(0xcc), chr(0xcd), chr(0xce), chr(0xcf), chr(0xd0), chr(0xd1), chr(0xd2), chr(0xd3), chr(0xd4), chr(0xd5), chr(0xd6), chr(0xd8), chr(0xd9), chr(0xda), chr(0xdb), chr(0xdc), chr(0xdd), chr(0xdf), chr(0xe0), chr(0xe1), chr(0xe2), chr(0xe3), chr(0xe4), chr(0xe5), chr(0xe6), chr(0xe7), chr(0xe8), chr(0xe9), chr(0xea), chr(0xeb), chr(0xec), chr(0xed), chr(0xee), chr(0xef), chr(0xf1), chr(0xf2), chr(0xf3), chr(0xf4), chr(0xf5), chr(0xf6), chr(0xf8), chr(0xf9), chr(0xfa), chr(0xfb), chr(0xfc), chr(0xfd), chr(0xff), chr(0x41), chr(0x61), chr(0x41), chr(0x61), chr(0x41), chr(0x61), chr(0x43), chr(0x63), chr(0x43), chr(0x63), chr(0x43), chr(0x63), chr(0x43), chr(0x63), chr(0x44), chr(0x64), chr(0xd0), chr(0x64), chr(0x45), chr(0x65), chr(0x45), chr(0x65), chr(0x45), chr(0x65), chr(0x45), chr(0x65), chr(0x45), chr(0x65), chr(0x47), chr(0x67), chr(0x47), chr(0x67), chr(0x47), chr(0x67), chr(0x47), chr(0x67), chr(0x48), chr(0x68), chr(0x48), chr(0x68), chr(0x49), chr(0x69), chr(0x49), chr(0x69), chr(0x49), chr(0x69), chr(0x49), chr(0x69), chr(0x49), chr(0x69), chr(0x3f), chr(0x3f), chr(0x4a), chr(0x6a), chr(0x4b), chr(0x6b), chr(0x4c), chr(0x6c), chr(0x4c), chr(0x6c), chr(0x4c), chr(0x6c), chr(0x3f), chr(0x3f), chr(0x4c), chr(0x6c), chr(0x4e), chr(0x6e), chr(0x4e), chr(0x6e), chr(0x4e), chr(0x6e), chr(0x3f), chr(0x4f), chr(0x6f), chr(0x4f), chr(0x6f), chr(0x4f), chr(0x6f), chr(0xa6), chr(0xb6), chr(0x52), chr(0x72), chr(0x52), chr(0x72), chr(0x52), chr(0x72), chr(0x53), chr(0x73), chr(0x53), chr(0x73), chr(0x53), chr(0x73), chr(0xa9), chr(0xb9), chr(0x54), chr(0x74), chr(0x54), chr(0x74), chr(0x54), chr(0x74), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x57), chr(0x77), chr(0x59), chr(0x79), chr(0xbc), chr(0x5a), chr(0x7a), chr(0x5a), chr(0x7a), chr(0xae), chr(0xbe), chr(0x3f), chr(0x83), chr(0x4f), chr(0x6f), chr(0x55), chr(0x75), chr(0x41), chr(0x61), chr(0x49), chr(0x69), chr(0x4f), chr(0x6f), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x55), chr(0x75), chr(0x3f), chr(0x3f), chr(0x3f), chr(0x3f), chr(0x3f), chr(0x3f));
  $b = array('_', 'A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o');
  return str_replace($a, $b, $str);
}

/**
 * 
 * Generate the button source code according to AGID specs,
 * using AGID vendor folder.
 * @PASW aggiornato con nuovi provider
 * 
 * @return 
 *   A string containing the source code that generate the Login Button 
 */
function _spid_pasw_spidbutton() {
	global $base_url;

    $spid_ico_circle_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-ico-circle-bb.svg';
    $spid_ico_circle_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-ico-circle-bb.png';

    $spid_idp_infocert_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-infocertid.svg';
    $spid_idp_infocert_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-infocertid.png';

    $spid_idp_timid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-timid.svg';
    $spid_idp_timid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-timid.png';

    $spid_idp_posteid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-posteid.svg';
    $spid_idp_posteid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-posteid.png';

    $spid_idp_sielteid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-sielteid.svg';
    $spid_idp_sielteid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-sielteid.png';

    $spid_idp_arubaid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-arubaid.svg';
    $spid_idp_arubaid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-arubaid.png';

    $spid_idp_namirialid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-namirialid.svg';
    $spid_idp_namirialid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-namirialid.png';

    $spid_idp_registerid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-spiditalia.svg';
    $spid_idp_registerid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-spiditalia.png';

    $spid_idp_intesaid_svg = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-intesaid.svg';
    $spid_idp_intesaid_png = '/' . drupal_get_path('module', "spid_pasw") . '/vendor/agid/img/spid-idp-intesaid.png';

    $infocert_id = 'https://identity.infocert.it';
    $poste_id = 'https://posteid.poste.it';
    $tim_id = 'https://login.id.tim.it/affwebservices/public/saml2sso';
//    $sielte_id = 'http://paolo.casabozzo.net/simplesamlphp/www/saml2/idp/metadata.php'; // 'https://identity.sieltecloud.it';
    $sielte_id = 'https://identity.sieltecloud.it';
    $aruba_id = 'https://loginspid.aruba.it';
	$namirial_id = 'https://idp.namirialtsp.com/idp';
	$register_id = 'https://spid.register.it';
    $intesa_id =  'https://spid.intesa.it';

    $formaction = $base_url . '/saml_login';

    $spid_bottone = <<<BOTTONE
    <form name="spid_idp_access" action="$formaction" method="post">
        <a href="#" class="italia-it-button italia-it-button-size-s button-spid" spid-idp-button="#spid-idp-button-small-post" aria-haspopup="true" aria-expanded="false">
            <span class="italia-it-button-icon"><img src="$spid_ico_circle_svg" onerror="this.src='$spid_ico_circle_png'; this.onerror=null;" alt="" /></span>
            <span class="italia-it-button-text">Entra con SPID</span>
        </a>
        <div id="spid-idp-button-small-post" class="spid-idp-button spid-idp-button-tip spid-idp-button-relative">
            <ul id="spid-idp-list-small-root-post" class="spid-idp-button-menu" aria-labelledby="spid-idp">
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="infocert_id" type="submit" value="$infocert_id"><span class="spid-sr-only">Infocert ID</span><img class="spid-idp-button-logo" src="$spid_idp_infocert_svg" onerror="this.src='$spid_idp_infocert_png'; this.onerror=null;" alt="Infocert ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="poste_id" type="submit" value="$poste_id"><span class="spid-sr-only">Poste ID</span><img class="spid-idp-button-logo" src="$spid_idp_posteid_svg" onerror="this.src='$spid_idp_posteid_png'; this.onerror=null;" alt="Poste ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="tim_id" type="submit" value="$tim_id"><span class="spid-sr-only">Tim ID</span><img class="spid-idp-button-logo" src="$spid_idp_timid_png" onerror="this.src='$spid_idp_timid_svg'; this.onerror=null;" alt="Tim ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="sielte_id" type="submit" value="$sielte_id"><span class="spid-sr-only">Sielte ID</span><img class="spid-idp-button-logo" src="$spid_idp_sielteid_png" onerror="this.src='$spid_idp_sielteid_svg'; this.onerror=null;" alt="Sielte ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="aruba_id" type="submit" value="$aruba_id"><span class="spid-sr-only">Aruba ID</span><img class="spid-idp-button-logo" src="$spid_idp_arubaid_png" onerror="this.src='$spid_idp_arubaid_svg'; this.onerror=null;" alt="Aruba ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="namirial_id" type="submit" value="$namirial_id"><span class="spid-sr-only">Namirial ID</span><img class="spid-idp-button-logo" src="$spid_idp_namirialid_png" onerror="this.src='$spid_idp_namirialid_svg'; this.onerror=null;" alt="Namirial ID" /></button>
                </li>
                <li class="spid-idp-button-link">
                    <button class="idp-button-idp-logo" name="register_id" type="submit" value="$register_id"><span class="spid-sr-only">SpidItalia ID</span><img class="spid-idp-button-logo" src="$spid_idp_registerid_png" onerror="this.src='$spid_idp_registerid_svg'; this.onerror=null;" alt="SpidItalia ID" /></button>
                </li>
          <li class="spid-idp-button-link">
              <button class="idp-button-idp-logo" name="intesa_id" type="submit" value="$intesa_id"><span class="spid-sr-only">Intesa ID</span><img class="spid-idp-button-logo" src="$spid_idp_intesaid_png" onerror="this.src='$spid_idp_intesaid_svg'; this.onerror=null;" alt="Intesa ID" /></button>
          </li>
                <li class="spid-idp-support-link">
                    <a href="http://www.spid.gov.it">Maggiori info</a>
                </li>
                <li class="spid-idp-support-link">
                    <a href="http://www.spid.gov.it/#registrati">Non hai SPID?</a>
                </li>
            <li class="spid-idp-support-link">
                <a href="https://www.spid.gov.it/serve-aiuto">Serve aiuto?</a>
            </li>
            </ul>
        </div>
    </form>
BOTTONE;

    return $spid_bottone;
}

/**
 * Form submission handler for user_form.
 *
 * @see spid_pasw_form_user_register_form_alter()
 * @see spid_pasw_form_user_form_alter()
 */
function spid_pasw_user_form_submit($form, FormStateInterface $form_state) {
  $authmap = \Drupal::service('externalauth.authmap');
  $externalauth = \Drupal::service('externalauth.externalauth');

  // Add an authmap entry for this account, so it can leverage SAML
  // authentication.
  if ($form_state->getValue('spid_pasw_user_enable')) {
    $account = $form_state->getFormObject()->getEntity();
    // Link an authmap entry to this account, if not yet existing.
    // By default, we use the username as authname.
    // This can be altered if needed. See spid_pasw.api.php for
    // details.
    $authname = $account->getAccountName();
    \Drupal::modulehandler()->alter('spid_pasw_account_authname', $authname, $account);
    $externalauth->linkExistingAccount($authname, 'spid_pasw', $account);
  }
  // Remove this user from the ExternalAuth authmap table.
  else {
    $authmap->delete($form_state->getValue('uid'));
  }
}

/*
CODE TO DELETE A Block from region 
----------------------------------
use \Drupal\block\entity\Block;
	$my_block = Block::load('simplesamlphpauthstatus');
	if ($my_block->getRegion() == 'content') $my_block->delete();
----------------------------------
CODE TO CREATE INSTANCE
----------------------------

$vis_config = 
[
  'request_path' => 
    [
       'id' => 'request_path',
       'pages' =>  '/user/login',
       'negate' => 0,
       'context_mapping' => [],
    ]
];
$plugin_id = 'spid_pasw_block';$theme ='bartik';
$blockEntityManager = \Drupal::service('entity.manager')->getStorage('block');
$my_block = $blockEntityManager->create(
  array(
      'id'=> 'simplesamlphpauthstatus',
      'plugin' => $plugin_id,
	  'settings' => [
	    'id' => 'spid_pasw_block',
		'label' => 'Oppure',
		'provider' => 'spid_pasw',
		'label_display' => 'visible',
	  ],
	  'region' => 'content',
      'theme' => $theme,
	  'visibility' => $vis_config,
	  'weight' => 0,
  )
);
$my_block->save();
-----------------------------------
*/